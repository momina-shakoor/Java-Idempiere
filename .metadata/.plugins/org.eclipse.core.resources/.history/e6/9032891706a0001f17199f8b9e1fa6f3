package com.idlogix.model;

import org.compiere.model.MClient;
import org.compiere.model.ModelValidationEngine;
import org.compiere.model.ModelValidator;
import org.compiere.model.PO;
import org.compiere.util.CLogger;

import java.sql.Timestamp;

public class MyModelValidator implements ModelValidator {

    private static final CLogger log = CLogger.getCLogger(MyModelValidator.class);

    @Override
    public void initialize(ModelValidationEngine engine, MClient client) {
        // Register this validator for the "C_ProductReview" table
        engine.addModelChange("C_ProductReview", this);
        log.info("Model Validator for C_ProductReview registered.");
    }

    @Override
    public int getAD_Client_ID() {
        // Return the client ID for which this validator is applicable
        return 0;  // For global validation, return 0
    }

    @Override
    public String modelChange(PO po, int type) throws Exception {
        // Apply your validation logic before or after a record change

        if (po instanceof X_C_ProductReview) {
            X_C_ProductReview review = (X_C_ProductReview) po;

            // 1. Ensure the rating is between 1 and 5
            int rating = review.getRating();
            if (rating < 1 || rating > 5) {
                return "Rating must be between 1 and 5.";  // Return error message if invalid
            }

            // 2. Ensure the review text is not empty
            String reviewText = review.getreviewtext();
            if (reviewText == null || reviewText.trim().isEmpty()) {
                return "Review text cannot be empty.";  // Return error message if empty
            }

            // 3. Ensure the review date is not in the future
            Timestamp reviewDate = review.getreviewdate();
            if (reviewDate != null && reviewDate.after(new Timestamp(System.currentTimeMillis()))) {
                return "Review date cannot be in the future.";  // Return error if review date is in the future
            }

            // 4. Optionally, set the review status based on the rating
            if (rating == 1) {
                review.setreviewstatus("Needs Attention");
            } else {
                review.setreviewstatus("Normal");
            }
        }
        return null;  // Return null to indicate that the validation passed successfully
    }

    @Override
    public String docValidate(PO po, int timing) {
        // Optional: You can implement document-level validations for more specific checks.
        return null;  // Return null if no validation needed
    }

	@Override
	public String login(int AD_Org_ID, int AD_Role_ID, int AD_User_ID) {
		// TODO Auto-generated method stub
		return null;
	}
}
